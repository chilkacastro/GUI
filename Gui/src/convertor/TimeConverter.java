/*
 * The MIT License
 *
 * Copyright 2021 Chilka Castro.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package convertor;

import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;

/**
 * A Time Converter Class
 * @author Chilka Castro
 */
public class TimeConverter extends javax.swing.JFrame {
    private Menu menu;
    
    /**
     * Constructor with menu data member
     * @param menu the input menu object
     */
    public TimeConverter(Menu menu) {
        initComponents();
        this.menu = menu;
        equalL2.setVisible(false);
        ImageIcon titleImg = new ImageIcon("imgs\\clock.png");  
        imgL.setIcon(titleImg);
        msgL.setVisible(false);
        sliderP.setVisible(false);
        inputDaysTF.setFocusable(false);
        inputHrsTF.setFocusable(false);
        outputMinsTF.setFocusable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeBG = new javax.swing.ButtonGroup();
        titeL = new javax.swing.JLabel();
        min2DayHrMinB = new javax.swing.JRadioButton();
        dayHrMin2MinB = new javax.swing.JRadioButton();
        inputMinsTF = new javax.swing.JTextField();
        inputDaysTF = new javax.swing.JTextField();
        inputHrsTF = new javax.swing.JTextField();
        outputMinsTF = new javax.swing.JTextField();
        equalL2 = new javax.swing.JLabel();
        equalL1 = new javax.swing.JLabel();
        hrsUnitL = new javax.swing.JLabel();
        minsUnitL = new javax.swing.JLabel();
        daysUnitL = new javax.swing.JLabel();
        minsUnitL2 = new javax.swing.JLabel();
        submitB = new javax.swing.JButton();
        msgL = new javax.swing.JLabel();
        imgL = new javax.swing.JLabel();
        sliderP = new javax.swing.JPanel();
        inputSL3 = new javax.swing.JSlider();
        inputSL2 = new javax.swing.JSlider();
        inputSL1 = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Time Converter");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        titeL.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        titeL.setForeground(new java.awt.Color(0, 102, 102));
        titeL.setText("Time Converter");

        modeBG.add(min2DayHrMinB);
        min2DayHrMinB.setSelected(true);
        min2DayHrMinB.setText("min TO day-hr-min ");
        min2DayHrMinB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                min2DayHrMinBActionPerformed(evt);
            }
        });

        modeBG.add(dayHrMin2MinB);
        dayHrMin2MinB.setText("day-hr-min TO min");
        dayHrMin2MinB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayHrMin2MinBActionPerformed(evt);
            }
        });

        inputMinsTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputMinsTFKeyReleased(evt);
            }
        });

        inputDaysTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputDaysTFKeyReleased(evt);
            }
        });

        inputHrsTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputHrsTFKeyReleased(evt);
            }
        });

        equalL2.setForeground(new java.awt.Color(0, 102, 102));
        equalL2.setText("=");

        equalL1.setForeground(new java.awt.Color(0, 102, 102));
        equalL1.setText("=");

        hrsUnitL.setText("hour");

        minsUnitL.setText("min");

        daysUnitL.setText("day");

        minsUnitL2.setText("min");

        submitB.setText("Submit");
        submitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBActionPerformed(evt);
            }
        });

        msgL.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        msgL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msgL.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        inputSL3.setMajorTickSpacing(10);
        inputSL3.setMinorTickSpacing(1);
        inputSL3.setPaintLabels(true);
        inputSL3.setPaintTicks(true);
        inputSL3.setValue(0);
        inputSL3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputSL3StateChanged(evt);
            }
        });

        inputSL2.setMajorTickSpacing(10);
        inputSL2.setMinorTickSpacing(1);
        inputSL2.setPaintLabels(true);
        inputSL2.setPaintTicks(true);
        inputSL2.setValue(0);
        inputSL2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputSL2StateChanged(evt);
            }
        });

        javax.swing.GroupLayout sliderPLayout = new javax.swing.GroupLayout(sliderP);
        sliderP.setLayout(sliderPLayout);
        sliderPLayout.setHorizontalGroup(
            sliderPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sliderPLayout.createSequentialGroup()
                .addGroup(sliderPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputSL2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputSL3, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );
        sliderPLayout.setVerticalGroup(
            sliderPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sliderPLayout.createSequentialGroup()
                .addComponent(inputSL2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(inputSL3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        inputSL1.setMajorTickSpacing(10);
        inputSL1.setMinorTickSpacing(1);
        inputSL1.setPaintLabels(true);
        inputSL1.setPaintTicks(true);
        inputSL1.setValue(0);
        inputSL1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputSL1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(equalL1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(equalL2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(inputDaysTF, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addComponent(daysUnitL, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(inputHrsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(24, 24, 24)
                                                .addComponent(hrsUnitL, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(outputMinsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(minsUnitL2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(inputMinsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(24, 24, 24)
                                                .addComponent(minsUnitL, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sliderP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(inputSL1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(titeL, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(imgL, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(min2DayHrMinB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dayHrMin2MinB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(35, 35, 35)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitB)
                        .addGap(16, 16, 16)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 36, Short.MAX_VALUE)
                .addComponent(msgL, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(titeL)
                    .addComponent(imgL, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputMinsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minsUnitL))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(equalL1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(inputDaysTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(daysUnitL))
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(inputHrsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(hrsUnitL))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(outputMinsTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minsUnitL2)
                                    .addComponent(equalL2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(inputSL1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(min2DayHrMinB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dayHrMin2MinB))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submitB)
                        .addGap(31, 31, 31)))
                .addComponent(msgL, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets input unit min to day, hour, min arrangement
     * @param evt the event action
     */
    private void min2DayHrMinBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_min2DayHrMinBActionPerformed
        equalL1.setVisible(true);
        minsUnitL.setText("min");
        daysUnitL.setText("day");
        hrsUnitL.setText("hr");
        equalL2.setVisible(false);
        msgL.setVisible(false);
        sliderP.setVisible(false);
        inputDaysTF.setFocusable(false);
        inputHrsTF.setFocusable(false);
        outputMinsTF.setFocusable(false);
        cleanTextField();
    }//GEN-LAST:event_min2DayHrMinBActionPerformed

    /**
     * Sets input unit to day, hour, min to min arrangement
     * @param evt the event action
     */
    private void dayHrMin2MinBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayHrMin2MinBActionPerformed
        inputDaysTF.setFocusable(true);
        inputHrsTF.setFocusable(true);
        outputMinsTF.setFocusable(true);
        equalL2.setVisible(true);
        minsUnitL.setText("day");
        daysUnitL.setText("hr");
        hrsUnitL.setText("min");
        equalL1.setVisible(false);
        msgL.setVisible(false);
        sliderP.setVisible(true);
        outputMinsTF.setFocusable(false);
        cleanTextField();
    }//GEN-LAST:event_dayHrMin2MinBActionPerformed
    
    /**
     * Clean text fields
     */
    public void cleanTextField() {
        inputDaysTF.setText("");
        inputHrsTF.setText("");
        inputMinsTF.setText("");
        outputMinsTF.setText("");
    }
    
    /**
     * Handles the submit event, do the conversion
     * @param evt the event action
     */
    private void submitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBActionPerformed
        msgL.setBackground(Color.BLACK);
        msgL.setForeground(Color.BLUE);
        convertTime();
    }//GEN-LAST:event_submitBActionPerformed

    /**
     * Sets the menu frame visible again once the length converter window is closed
     * @param evt the event action
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        menu.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    /**
     * Updates the input text field when the slider value gets changed
     * @param evt the event action
     */
    private void inputSL1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputSL1StateChanged
        inputMinsTF.setText(inputSL1.getValue() + "");
    }//GEN-LAST:event_inputSL1StateChanged

    /**
     * Updates the input text field when the slider value gets changed
     * @param evt the event action
     */
    private void inputSL2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputSL2StateChanged
        inputDaysTF.setText(inputSL2.getValue() + "");
    }//GEN-LAST:event_inputSL2StateChanged

    /**
     * Updates the input text field when the slider value gets changed
     * @param evt the event action
     */
    private void inputSL3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputSL3StateChanged
        inputHrsTF.setText(inputSL3.getValue() + "");
    }//GEN-LAST:event_inputSL3StateChanged
    
      
    /**
     * Converts the values with enter key
     * @param evt the action event
     */
    private void inputMinsTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputMinsTFKeyReleased
        msgL.setVisible(false);
        msgL.setBackground(Color.BLACK);
        msgL.setForeground(Color.BLUE);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && min2DayHrMinB.isSelected())
            convertTime();                             
    }//GEN-LAST:event_inputMinsTFKeyReleased

  
    /**
     * Converts the values with enter key
     * @param evt the action event
     */
    private void inputDaysTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputDaysTFKeyReleased
        msgL.setVisible(false);
        msgL.setBackground(Color.BLACK);
        msgL.setForeground(Color.BLUE);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && dayHrMin2MinB.isSelected()) 
            if (inputDaysTF.getText()!= null && inputMinsTF.getText()!= null)
                if (inputHrsTF.getText()!= null) 
                    convertTime();  
       
    }//GEN-LAST:event_inputDaysTFKeyReleased

  
    /**
     * Converts the values with enter key
     * @param evt the action event
     */
    private void inputHrsTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputHrsTFKeyReleased
        msgL.setVisible(false);
        msgL.setBackground(Color.BLACK);
        msgL.setForeground(Color.BLUE);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER && dayHrMin2MinB.isSelected())
            if (inputDaysTF.getText()!= null && inputMinsTF.getText()!= null)
                    if (inputHrsTF.getText()!= null )
                        convertTime();   
    }//GEN-LAST:event_inputHrsTFKeyReleased
    
    /**
     * Reads the user input, and convert the weight, then set the result in the 
     * output label.
     */
    public void convertTime() {
        try {
            double input1 = Math.abs(Double.parseDouble(inputMinsTF.getText())); 
        
            // Minutes -> Days, Hours and Minutes
            if (min2DayHrMinB.isSelected()) {
                double[] nums = minToDayHrMin(input1);
                inputDaysTF.setText(String.format("%.2f", nums[0]));
                inputHrsTF.setText(String.format("%.2f", nums[1]));
                outputMinsTF.setText(String.format("%.2f", nums[2]));
                msgL.setVisible(true);
                msgL.setText(String.format("%.2f minute(s) is equal to %.1f day(s), "
                        + "%.1f hour(s), and %.1f minute(s)", input1, nums[0],
                        nums[1], nums[2]));
            }

            // Days, Hours and Minutes -> Minutes
            double input2 = Math.abs(Double.parseDouble(inputDaysTF.getText())); 
            double input3 = Math.abs(Double.parseDouble(inputHrsTF.getText()));

            if (dayHrMin2MinB.isSelected()) {
                double totalMins = dayMinHrToMin(input1, input2, input3);
                outputMinsTF.setText(String.format("%.2f", totalMins));
                msgL.setVisible(true);
                msgL.setText(String.format("%.1f day(s), %.1f hour(s), and %.1f minute(s) is "
                        + "equal to %.1f minute(s)", input1, input2, input3, totalMins));
            }
        
        } catch (NumberFormatException e) {
            msgL.setForeground(Color.RED);
            msgL.setBackground(Color.RED);
            msgL.setVisible(true);
            msgL.setText("The input value is incorrect. Please try again.");
        }
    }
    
    /**
     * Converts min to day, hour and min
     * @param min the input min
     * @return converted day, hour and min array
     */
    public double[] minToDayHrMin(double min) {
        final int hrToMinRatio = 60;
        final int minToDayRatio = 1440;
        
        double day = min / minToDayRatio;
        double leftMin = min % minToDayRatio; // left mins after day-min conversion
        double hr = leftMin / hrToMinRatio;    
        double min2 = min % hrToMinRatio;     // left mins after hr-min conversion

        return new double[]{day, hr, min2};
    }
    
    /**
     * Converts day, hour, and min to min
     * @param day input day
     * @param hr input hour
     * @param min input min
     * @return the converted total min
     */
    public double dayMinHrToMin(double day, double hr, double min) {
        final int hrToMinRatio = 60;
        final int dayToMinRatio = 1440;
        
        double dayToMin = day * dayToMinRatio;
        double hrToMin = hr * hrToMinRatio;
        
        return dayToMin + hrToMin + min;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton dayHrMin2MinB;
    private javax.swing.JLabel daysUnitL;
    private javax.swing.JLabel equalL1;
    private javax.swing.JLabel equalL2;
    private javax.swing.JLabel hrsUnitL;
    private javax.swing.JLabel imgL;
    private javax.swing.JTextField inputDaysTF;
    private javax.swing.JTextField inputHrsTF;
    private javax.swing.JTextField inputMinsTF;
    private javax.swing.JSlider inputSL1;
    private javax.swing.JSlider inputSL2;
    private javax.swing.JSlider inputSL3;
    private javax.swing.JRadioButton min2DayHrMinB;
    private javax.swing.JLabel minsUnitL;
    private javax.swing.JLabel minsUnitL2;
    private javax.swing.ButtonGroup modeBG;
    private javax.swing.JLabel msgL;
    private javax.swing.JTextField outputMinsTF;
    private javax.swing.JPanel sliderP;
    private javax.swing.JButton submitB;
    private javax.swing.JLabel titeL;
    // End of variables declaration//GEN-END:variables
}