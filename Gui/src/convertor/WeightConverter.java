/*
 * The MIT License
 *
 * Copyright 2021 Chilka Castro.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package convertor;

import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;

/**
 * A Weight Converter Class
 * @author Chilka Castro
 */
public class WeightConverter extends javax.swing.JFrame {
    private Menu menu;   
    
    /**
     * Constructor with menu data member
     * @param menu the input menu object
     */
    public WeightConverter(Menu menu) {
        this.menu = menu;
        initComponents();
        ImageIcon titleImg = new ImageIcon("imgs\\scale.png");  
        imgL.setIcon(titleImg);
        msgL.setVisible(false);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modeB = new javax.swing.ButtonGroup();
        titleL = new javax.swing.JLabel();
        inputUnitL = new javax.swing.JLabel();
        inputTF = new javax.swing.JTextField();
        equalL = new javax.swing.JLabel();
        outputUnitL = new javax.swing.JLabel();
        kg2LbB = new javax.swing.JRadioButton();
        lb2KgB = new javax.swing.JRadioButton();
        submitB = new javax.swing.JButton();
        outputL = new javax.swing.JLabel();
        inputSL = new javax.swing.JSlider();
        kg2OzB = new javax.swing.JRadioButton();
        oz2KgB = new javax.swing.JRadioButton();
        msgL = new javax.swing.JLabel();
        imgL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Weight Converter");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        titleL.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 36)); // NOI18N
        titleL.setForeground(new java.awt.Color(153, 51, 0));
        titleL.setText("Weight Converter");

        inputUnitL.setText("kg");

        inputTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputTFKeyReleased(evt);
            }
        });

        equalL.setForeground(new java.awt.Color(153, 51, 0));
        equalL.setText("=");

        outputUnitL.setText("lb");

        modeB.add(kg2LbB);
        kg2LbB.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        kg2LbB.setSelected(true);
        kg2LbB.setText("kg to lb");
        kg2LbB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kg2LbBActionPerformed(evt);
            }
        });

        modeB.add(lb2KgB);
        lb2KgB.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        lb2KgB.setText("lb to kg");
        lb2KgB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lb2KgBActionPerformed(evt);
            }
        });

        submitB.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        submitB.setText("Submit");
        submitB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBActionPerformed(evt);
            }
        });

        outputL.setForeground(new java.awt.Color(204, 51, 0));

        inputSL.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        inputSL.setMajorTickSpacing(25);
        inputSL.setMinorTickSpacing(5);
        inputSL.setPaintLabels(true);
        inputSL.setPaintTicks(true);
        inputSL.setValue(0);
        inputSL.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                inputSLStateChanged(evt);
            }
        });

        modeB.add(kg2OzB);
        kg2OzB.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        kg2OzB.setText("kg to oz");
        kg2OzB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kg2OzBActionPerformed(evt);
            }
        });

        modeB.add(oz2KgB);
        oz2KgB.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        oz2KgB.setText("oz to kg");
        oz2KgB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oz2KgBActionPerformed(evt);
            }
        });

        msgL.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        msgL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        msgL.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitB)
                .addGap(22, 22, 22))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(inputTF, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inputUnitL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(equalL, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(outputL, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(outputUnitL, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lb2KgB)
                                    .addComponent(kg2LbB)
                                    .addComponent(kg2OzB)
                                    .addComponent(oz2KgB))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(96, 96, 96)
                                        .addComponent(inputSL, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(msgL, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(titleL)
                        .addGap(18, 18, 18)
                        .addComponent(imgL, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imgL, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(titleL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputUnitL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputUnitL)
                        .addComponent(equalL))
                    .addComponent(outputL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(kg2LbB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputSL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lb2KgB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kg2OzB)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(oz2KgB)
                    .addComponent(msgL, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(submitB)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets the input unit as lb and the output unit as kilogram
     * @param evt the event action
     */
    private void lb2KgBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lb2KgBActionPerformed
        msgL.setVisible(false);
        inputUnitL.setText("lb");
        outputUnitL.setText("kg");
        cleanTextField();
    }//GEN-LAST:event_lb2KgBActionPerformed

    /**
     * Clean text fields
     */
    public void cleanTextField() {
        inputUnitL.setText("");
        outputL.setText("");
    }
    
    /**
     * Handles the submit event, do the conversion
     * @param evt the event action
     */
    private void submitBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBActionPerformed
        msgL.setBackground(Color.BLACK);
        msgL.setForeground(Color.BLUE);
        convertWeight();
    }//GEN-LAST:event_submitBActionPerformed
    
    /**
     * Reads the user input, and convert the weight, then set the result in the 
     * output label
     */
    public void convertWeight() {
        try {
            // read from text field
            double input = Math.abs(Double.parseDouble(inputTF.getText())); 
            
            // kilogram to pound
            if (kg2LbB.isSelected()) {
                outputL.setText(String.format("%.2f", kgToLb(input)));
                msgL.setText(String.format("%.2f kg is equal to %.2f lb", 
                        input, kgToLb(input)));
                msgL.setVisible(true);
            }
            // pound to kilogram
            else if (lb2KgB.isSelected()) {
                outputL.setText(String.format("%.2f", lbToKg(input)));
                msgL.setText(String.format("%.2f lb is equal to %.2f kg", 
                        input, lbToKg(input)));
                msgL.setVisible(true);
            }
            // kilogram to ounce
            else if (kg2OzB.isSelected()) {
                outputL.setText(String.format("%.2f", kgToOz(input)));
                msgL.setText(String.format("%.2f kg is equal to %.2f oz.", 
                        input, kgToOz(input)));
                msgL.setVisible(true);
            }
            // ounce to kilogram
            else {
                outputL.setText(String.format("%.2f", ozToKg(input)));
                msgL.setText(String.format("%.2f oz. is equal to %.2f kg", 
                        input, ozToKg(input)));
                msgL.setVisible(true);
            }
           
        } catch (NumberFormatException e) {
            msgL.setVisible(true);
            msgL.setForeground(Color.RED);
            msgL.setBackground(Color.RED);
            msgL.setText("The input value is incorrect. Please try again.");
        }
    }
    
    /**
     * Sets the input unit as kilogram and the output unit as lb
     * @param evt the event action
     */
    private void kg2LbBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kg2LbBActionPerformed
        msgL.setVisible(false);
        inputUnitL.setText("kg");
        outputUnitL.setText("lb"); 
        cleanTextField();
    }//GEN-LAST:event_kg2LbBActionPerformed

    /**
     * Converts the values with enter key
     * @param evt the event action
     */
    private void inputTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTFKeyReleased
        msgL.setVisible(false);
        msgL.setBackground(Color.BLACK);
        msgL.setForeground(Color.BLUE);
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            convertWeight();
    }//GEN-LAST:event_inputTFKeyReleased

    /**
     * Set the menu frame visible
     * @param evt the event action
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        menu.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    /**
     * Update the input text field when the slider value gets changed
     * @param evt the event action
     */
    private void inputSLStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_inputSLStateChanged
        inputTF.setText(inputSL.getValue() + "");
    }//GEN-LAST:event_inputSLStateChanged

    /**
     * Sets the input unit as kilogram and the output unit as oz
     * @param evt the event action
     */
    private void kg2OzBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kg2OzBActionPerformed
        msgL.setVisible(false);
        inputUnitL.setText("kg");
        outputUnitL.setText("oz");
        cleanTextField();
    }//GEN-LAST:event_kg2OzBActionPerformed

    /**
     * Sets the input unit as oz and the output unit as kilogram
     * @param evt the event action
     */
    private void oz2KgBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oz2KgBActionPerformed
        msgL.setVisible(false);
        inputUnitL.setText("oz");
        outputUnitL.setText("kg");
        cleanTextField();
    }//GEN-LAST:event_oz2KgBActionPerformed
    
    /**
     * Converts kilogram to lb
     * @param kg the input kilogram
     * @return the converted lb
     */
    public double kgToLb(double kg) {
        final double kg2lbRatio = 2.2;
        return kg * kg2lbRatio;   
    }

    /**
     * Converts lb to kilogram
     * @param lb the input lb
     * @return the converted kilogram
     */
    public double lbToKg(double lb) {
        final double lb2KgRatio = 0.4545;
        return lb * lb2KgRatio; 
    }
    
    /**
     * Converts kilogram to oz(ounce)
     * @param kg the input kilogram
     * @return the converted oz(ounce)
     */
    public double kgToOz(double kg) {
        final double kgToOzRatio = 35.274;
        return kg * kgToOzRatio;
    }
    
    /**
     * Converts oz(ounce) to kilogram
     * @param oz the input oz
     * @return the converted kilogram
     */
    public double ozToKg(double oz) {
        final double ozToKgRatio = 0.0283495;
        return oz * ozToKgRatio;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel equalL;
    private javax.swing.JLabel imgL;
    private javax.swing.JSlider inputSL;
    private javax.swing.JTextField inputTF;
    private javax.swing.JLabel inputUnitL;
    private javax.swing.JRadioButton kg2LbB;
    private javax.swing.JRadioButton kg2OzB;
    private javax.swing.JRadioButton lb2KgB;
    private javax.swing.ButtonGroup modeB;
    private javax.swing.JLabel msgL;
    private javax.swing.JLabel outputL;
    private javax.swing.JLabel outputUnitL;
    private javax.swing.JRadioButton oz2KgB;
    private javax.swing.JButton submitB;
    private javax.swing.JLabel titleL;
    // End of variables declaration//GEN-END:variables
}
